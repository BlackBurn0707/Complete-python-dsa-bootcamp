Python modules and packages are fundamental for organizing and reusing code. They allow developers to break down large programs into smaller, manageable, and reusable units, preventing the need to write code from scratch for common functionalities.

-----

### **1. Modules**

A module is essentially a Python file (`.py`) containing Python definitions and statements. It can define functions, classes, and variables.

  * **Importing an entire module:**
    To use functions or variables from a module, you need to import it. The most basic way is using the `import` keyword followed by the module name.

    ```python
    import math
    ```

    Once imported, you can access its contents using the dot notation (`.`).

    ```python
    result = math.sqrt(16) # Accessing the sqrt function from the math module
    print(result) # Output: 4.0
    ```

  * **Importing specific functions/objects from a module:**
    If you only need a few specific functions or objects from a module, you can import them directly using the `from...import` statement. This allows you to use the function names directly without the module prefix.

    ```python
    from math import sqrt, pi
    print(sqrt(25)) # Output: 5.0
    print(pi)       # Output: 3.141592653589793
    ```

  * **Importing all functions/objects from a module (using `*`):**
    You can import all functions and objects from a module using the `*` wildcard. While convenient, this is generally **discouraged** in larger projects as it can lead to name conflicts if different modules have functions with the same name.

    ```python
    from math import *
    print(sqrt(49)) # Output: 7.0
    print(sin(90))  # Output: 0.8939966636005579 (example of another math function)
    ```

  * **Importing with an alias:**
    For modules with long names, or to avoid name clashes, you can give them an alias using the `as` keyword during import. This makes your code more concise.

    ```python
    import numpy as np
    # Now you can use 'np' instead of 'numpy'
    arr = np.array([1, 2, 3, 4])
    print(arr) # Output: [1 2 3 4]
    ```

-----

### **2. Packages**

A package is a way of organizing related modules into a directory hierarchy. It's essentially a folder containing one or more module files, along with a special file called `__init__.py`.

  * **The Role of `__init__.py`:**
    The `__init__.py` file is crucial for Python to recognize a directory as a package. Even if it's empty, its presence tells Python that the directory should be treated as a package when imported. It can also contain initialization code for the package or define what symbols are exposed when the package is imported.

  * **Creating a Custom Package:**

    1.  **Create a folder:** This folder will be your package (e.g., `packages`).
    2.  **Add `__init__.py`:** Inside the package folder, create an empty file named `__init__.py`.
    3.  **Add modules:** Place your Python module files (e.g., `maths.py`) inside the package folder.

    **Example Structure:**

    ```
    your_project/
    ├── packages/
    │   ├── __init__.py
    │   └── maths.py
    └── main_script.py (or Jupyter Notebook)
    ```

  * **Calling Functions from a Custom Package:**
    Assuming `maths.py` inside `packages` has an `addition` function:

    ```python
    # Inside maths.py
    def addition(a, b):
        return a + b
    ```

    You can import and use it in another file (`main_script.py` or a Jupyter Notebook) like this:

    ```python
    # Method 1: Import specific function
    from packages.maths import addition
    result = addition(2, 3)
    print(result) # Output: 5

    # Method 2: Import the module within the package
    from packages import maths
    result = maths.addition(2, 3)
    print(result) # Output: 5
    ```

-----

### **3. Sub-packages**

Packages can contain sub-packages, creating a nested hierarchy. Each sub-package directory also requires its own `__init__.py` file.

  * **Creating a Sub-package:**

    1.  Inside your main package folder (e.g., `packages`), create another folder (e.g., `sub_packages`).
    2.  Inside `sub_packages`, create an empty `__init__.py` file.
    3.  Add your module files (e.g., `mult.py`) inside `sub_packages`.

    **Example Structure:**

    ```
    your_project/
    ├── packages/
    │   ├── __init__.py
    │   ├── maths.py
    │   └── sub_packages/
    │       ├── __init__.py
    │       └── mult.py
    └── main_script.py
    ```

  * **Calling Functions from a Sub-package:**
    Assuming `mult.py` inside `packages/sub_packages` has a `multiply` function:

    ```python
    # Inside mult.py
    def multiply(a, b):
        return a * b
    ```

    You can import and use it like this:

    ```python
    from packages.sub_packages.mult import multiply
    result = multiply(4, 5)
    print(result) # Output: 20
    ```

-----

### **4. Installing External Packages (Libraries)**

Many useful packages are not part of Python's standard library and need to be installed. **`pip`** is the package installer for Python.

  * **Checking for Installed Packages:**
    If you try to `import` a package that isn't installed (e.g., `numpy` without installing it), you'll get a `ModuleNotFoundError`.

  * **Installing a Single Package:**
    The most common way to install a package is directly from the command line:

    ```bash
    pip install numpy
    ```

    This installs the package into your current Python environment (or virtual environment).

  * **Installing Packages from `requirements.txt`:**
    For managing project dependencies, it's common practice to list all required packages in a `requirements.txt` file.
    **Example `requirements.txt`:**

    ```
    numpy
    pandas
    scikit-learn
    ```

    You can then install all of them at once:

    ```bash
    pip install -r requirements.txt
    ```

-----

### **5. Executing Python Files (`.py`) from the Terminal**

To run a Python script from your terminal:

1.  **Navigate to the directory:** Use the `cd` command to change your current directory to where your Python file is located.
    ```bash
    cd path/to/your/python/project/
    ```
2.  **Run the file:** Use the `python` command followed by the script's filename.
    ```bash
    python test.py
    ```