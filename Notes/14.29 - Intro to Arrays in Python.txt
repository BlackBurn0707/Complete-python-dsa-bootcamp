Arrays and Lists in Python
This module introduces arrays and differentiates them from lists in Python, explaining why understanding arrays is crucial even when working with Python's built-in lists.

What is an Array?
	• A collection of elements stored in contiguous memory locations. 
		○ Contiguous means elements are stored right next to each other in memory (e.g., if one element starts at address 100 and takes 4 bytes, the next starts at 104).
		○ This direct memory allocation is important for understanding performance and how data structures work at a lower level.
	• Elements of an array must be of the same data type (homogeneous). 
		○ Unlike Python lists, you can't mix integers, floats, and strings within the same array.
		○ If an array stores integers, all its elements must be integers.
	• Allows for efficient access and manipulation of data using indexing (e.g., array[0]).

Disadvantages/Properties of Arrays (compared to Python Lists):
	• Fixed Size: When an array is created, its size must be specified and cannot be changed later. You cannot store more elements than its declared size.
	• Homogeneous: All elements must be of the same data type.

Why are Arrays Important for Python Developers?
	• Python's built-in lists are extended on top of the properties of basic C++ arrays.
	• Understanding arrays helps in comprehending the shortcomings they address and why more flexible data structures (like Python lists) were developed.
	• Many advanced data structures are designed to overcome array limitations.

Python's Approach to Arrays:
	• Python primarily uses lists instead of arrays due to their greater flexibility (dynamic size, heterogeneous data types).
	• However, Python provides the ability to use array-like structures through external libraries such as: 
		○ array module: A built-in module that provides a more compact way to store arrays of basic numeric types. 
			§ To use it, you need to import array.
			§ When creating an array using array.array(), you must specify a type code (e.g., 'i' for signed integer, 'f' for float) to indicate the data type of its elements. These type codes correspond to C++ data types.
		○ NumPy: A popular library for numerical computation, especially in data science and analytics, which provides powerful array objects.

Arrays vs. Lists: A Comparison
Feature	Array	List
Data Type	Homogeneous (all elements same type)	Heterogeneous (can store different types)
Flexibility	Fixed size (cannot grow or shrink)	Dynamic size (can grow and shrink)
Performance	More memory-efficient for large, uniform data; faster for specific operations	Generally slower and less memory-efficient for very large, homogeneous datasets
Usage in Python	Requires array module or NumPy library	Built-in data structure

Key Takeaways:
	• While Python's lists are highly flexible and commonly used, understanding the underlying concept of arrays (fixed size, homogeneous, contiguous memory) is crucial.
	• Lists are conceptually built upon arrays, addressing their limitations.
	• In many programming contexts, "array" and "list" might be used interchangeably, especially when discussing general data storage.
	• The goal is to understand fundamental data structure concepts, which applies across different programming languages.
