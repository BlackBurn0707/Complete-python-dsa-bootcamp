## Python File Path Operations (using the `os` module)

The `os` module in Python provides a way to interact with the operating system, including functionalities for working with file paths, directories, 
and environmental variables. It's crucial for creating robust and platform-independent file management in your applications.

-----

### **1. Creating a New Directory**

You can create new directories (folders) using the `os.mkdir()` function.

  * **Function:** `os.mkdir(path)`

      * `path`: The path of the new directory to be created. If the parent directory does not exist, it will raise an error.

  * **Example:**

    ```python
    import os

    new_directory_name = "package_folder" # Or "new_directory" as in the transcript
    try:
        os.mkdir(new_directory_name)
        print(f"Directory '{new_directory_name}' created successfully.")
    except FileExistsError:
        print(f"Directory '{new_directory_name}' already exists.")
    except Exception as e:
        print(f"An error occurred: {e}")
    ```

    *Note: The transcript uses `make dir` but the correct function is `mkdir`.*

-----

### **2. Listing Files and Directories**

To get a list of all files and subdirectories within a specified path, use `os.listdir()`.

  * **Function:** `os.listdir(path='.')`

      * `path`: The directory for which you want to list the contents.
          * If `.` is provided, it lists contents of the current working directory.
          * If a specific path is provided, it lists contents of that path.

  * **Example:**

    ```python
    import os

    # List items in the current working directory
    items_in_current_dir = os.listdir('.')
    print(f"Items in current directory: {items_in_current_dir}")

    # Example for a specific directory (if 'package_folder' was created)
    # items_in_package_folder = os.listdir('package_folder')
    # print(f"Items in package_folder: {items_in_package_folder}")
    ```

-----

### **3. Joining Paths**

`os.path.join()` is essential for constructing file paths in a way that is compatible across different operating systems (Windows uses `\` while Linux/macOS use `/`).

  * **Function:** `os.path.join(path1, path2, ...)`

      * Combines one or more path components intelligently.

  * **Examples:**

    ```python
    import os

    directory_name = "my_folder"
    file_name = "document.txt"

    # Relative path
    full_relative_path = os.path.join(directory_name, file_name)
    print(f"Relative path: {full_relative_path}")
    # Output might be: my_folder\document.txt (on Windows) or my_folder/document.txt (on Linux/Mac)

    # Combining with current working directory to get a more complete path
    current_working_dir = os.getcwd()
    full_absolute_path_with_cwd = os.path.join(current_working_dir, directory_name, file_name)
    print(f"Full path with CWD: {full_absolute_path_with_cwd}")
    ```

-----

### **4. Checking if a Path Exists**

Before attempting to access or create a file/directory, it's often useful to check if the path already exists using `os.path.exists()`.

  * **Function:** `os.path.exists(path)`

      * Returns `True` if `path` refers to an existing path or an open file descriptor, `False` otherwise.

  * **Example:**

    ```python
    import os

    check_path_1 = "non_existent_file.txt"
    check_path_2 = "Example.txt" # Assuming this file exists from previous operations

    if os.path.exists(check_path_1):
        print(f"The path '{check_path_1}' exists.")
    else:
        print(f"The path '{check_path_1}' does not exist.")

    if os.path.exists(check_path_2):
        print(f"The path '{check_path_2}' exists.")
    else:
        print(f"The path '{check_path_2}' does not exist.")
    ```

-----

### **5. Checking if a Path is a File or Directory**

You can determine if a given path points to a file or a directory.

  * **Functions:**

      * `os.path.isfile(path)`: Returns `True` if `path` is an existing regular file.
      * `os.path.isdir(path)`: Returns `True` if `path` is an existing directory.

  * **Example:**

    ```python
    import os

    file_path_check = "Example.txt" # Assuming this is a file
    dir_path_check = "package_folder" # Assuming this is a directory

    if os.path.isfile(file_path_check):
        print(f"'{file_path_check}' is a file.")
    elif os.path.isdir(file_path_check):
        print(f"'{file_path_check}' is a directory.")
    else:
        print(f"'{file_path_check}' is neither a file nor a directory (or doesn't exist).")

    if os.path.isfile(dir_path_check):
        print(f"'{dir_path_check}' is a file.")
    elif os.path.isdir(dir_path_check):
        print(f"'{dir_path_check}' is a directory.")
    else:
        print(f"'{dir_path_check}' is neither a file nor a directory (or doesn't exist).")
    ```

-----

### **6. Getting the Absolute Path**

An absolute path is the complete path from the root directory of the file system. `os.path.abspath()` converts a relative path to an absolute path.

  * **Function:** `os.path.abspath(path)`

      * Returns a normalized absolute version of the `path`.

  * **Example:**

    ```python
    import os

    relative_path = "subfolder/my_report.pdf" # This is a relative path
    # If 'subfolder' exists in the CWD and 'my_report.pdf' exists in 'subfolder'

    absolute_path = os.path.abspath(relative_path)
    print(f"Relative Path: {relative_path}")
    print(f"Absolute Path: {absolute_path}")
    # Output might be: C:\Users\YourUser\ProjectFolder\subfolder\my_report.pdf (on Windows)
    ```

The `os` module is a powerful tool for managing files and directories programmatically, making your Python scripts adaptable to different operating systems.