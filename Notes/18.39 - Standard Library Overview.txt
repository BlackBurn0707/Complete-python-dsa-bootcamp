## Python Standard Library Overview

The Python Standard Library is a collection of modules that are installed with Python by default, providing a vast array of functionalities without needing to install additional packages. This allows for rapid development by leveraging pre-built tools for common programming tasks.

-----

### **1. `array` Module**

The `array` module provides an `array` object that is similar to a list but stores elements of a single data type, making it more memory-efficient for large sequences of numbers.

  * **Purpose:** Creating arrays of a uniform type.

  * **Key Function:** `array.array(typecode, initializer)`

      * `typecode`: A character representing the type of elements (e.g., `'i'` for signed integer, `'f'` for float).
      * `initializer`: A list or sequence of initial values.

    **Example:**

    ```python
    from array import array
    my_array = array('i', [1, 2, 3, 4])
    print(my_array) # Output: array('i', [1, 2, 3, 4])
    ```

-----

### **2. `math` Module**

The `math` module provides access to mathematical functions and constants.

  * **Purpose:** Performing common mathematical operations.

  * **Key Functions/Constants:**

      * `math.sqrt(x)`: Returns the square root of `x`.
      * `math.pi`: The mathematical constant $\\pi$ (pi).

    **Example:**

    ```python
    import math
    print(math.sqrt(16)) # Output: 4.0
    print(math.pi)       # Output: 3.141592653589793
    ```

-----

### **3. `random` Module**

The `random` module implements pseudo-random number generators for various distributions.

  * **Purpose:** Generating random numbers and making random selections.

  * **Key Functions:**

      * `random.randint(a, b)`: Returns a random integer $N$ such that $a \\le N \\le b$.
      * `random.choice(sequence)`: Returns a random element from a non-empty sequence.

    **Example:**

    ```python
    import random
    print(random.randint(1, 10))       # Output: A random integer between 1 and 10 (inclusive)
    fruits = ["apple", "banana", "cherry"]
    print(random.choice(fruits))      # Output: A random fruit from the list
    ```

-----

### **4. `os` Module**

The `os` module provides a way of using operating system dependent functionality, such as reading or writing to the file system.

  * **Purpose:** Interacting with the operating system, primarily for file and directory operations.

  * **Key Functions:**

      * `os.getcwd()`: Returns the current working directory.
      * `os.mkdir(path)`: Creates a directory named `path`.

    **Example:**

    ```python
    import os
    print(os.getcwd()) # Output: Current working directory path
    # os.mkdir("test_dir") # Uncomment to create a directory named 'test_dir'
    ```

-----

### **5. `shutil` Module**

The `shutil` module offers a number of high-level operations on files and collections of files. It is often used for common file system tasks that are not directly available in `os`.

  * **Purpose:** High-level file operations like copying, moving, and deleting files/directories.

  * **Key Function:**

      * `shutil.copyfile(src, dst)`: Copies the contents of the file named `src` to a file named `dst`.

    **Example:**

    ```python
    import shutil

    # Assuming 'source.txt' exists in the current directory
    # with content "Hello, how are you. I'm good I am fine. Welcome to the course."
    # Example:
    # with open("source.txt", "w") as f:
    #     f.write("Hello, how are you. I'm good I am fine. Welcome to the course.")

    shutil.copyfile("source.txt", "destination.txt")
    # 'destination.txt' will now contain the same content as 'source.txt'
    ```

-----

### **6. `json` Module**

The `json` module provides functions for working with JSON (JavaScript Object Notation) data, which is a common format for data interchange.

  * **Purpose:** Converting Python data structures (dictionaries, lists) to JSON strings and vice-versa (serialization/deserialization).

  * **Key Functions:**

      * `json.dumps(obj)`: Serializes Python `obj` into a JSON formatted string.
      * `json.loads(json_string)`: Deserializes a JSON formatted `json_string` into a Python object.

    **Example:**

    ```python
    import json
    data = {"name": "Krish", "age": 25}

    # Convert dictionary to JSON string
    json_str = json.dumps(data)
    print(json_str)        # Output: {"name": "Krish", "age": 25} (as a string)
    print(type(json_str))  # Output: <class 'str'>

    # Convert JSON string back to dictionary
    parsed_data = json.loads(json_str)
    print(parsed_data)     # Output: {'name': 'Krish', 'age': 25} (as a dictionary)
    print(type(parsed_data)) # Output: <class 'dict'>
    ```

-----

### **7. `csv` Module**

The `csv` module implements classes to read and write tabular data in CSV (Comma Separated Values) format.

  * **Purpose:** Reading from and writing to CSV files.

  * **Key Functions/Classes:**

      * `csv.writer(file_object)`: Returns a writer object responsible for converting the user's data into delimited strings on the given file-like object.
      * `writer.writerow(row)`: Writes a single row to the CSV file.
      * `csv.reader(file_object)`: Returns a reader object which will iterate over lines in the given CSV file.

    **Example:**

    ```python
    import csv

    # Writing to a CSV file
    with open('example.csv', 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Name", "Age"])
        writer.writerow(["Krish", 32])

    # Reading from a CSV file
    with open('example.csv', 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            print(row)
    # Output:
    # ['Name', 'Age']
    # ['Krish', '32']
    ```

-----

### **8. `datetime` Module**

The `datetime` module supplies classes for working with dates and times in both simple and complex ways.

  * **Purpose:** Manipulating dates and times.

  * **Key Classes/Functions:**

      * `datetime.datetime.now()`: Returns the current local date and time.
      * `datetime.timedelta(days=...)`: Represents a duration, the difference between two `datetime` objects.

    **Example:**

    ```python
    from datetime import datetime, timedelta

    current_time = datetime.now()
    print(f"Current Time: {current_time}")

    yesterday = current_time - timedelta(days=1)
    print(f"Yesterday's Time: {yesterday}")
    ```

-----

### **9. `time` Module**

The `time` module provides various time-related functions.

  * **Purpose:** Handling time-related tasks, including pausing program execution.

  * **Key Function:**

      * `time.sleep(seconds)`: Suspends execution for the given number of seconds.

    **Example:**

    ```python
    import time

    print("Starting...")
    time.sleep(2) # Pause for 2 seconds
    print("Resumed after 2 seconds.")
    ```

-----

### **10. `re` Module (Regular Expressions)**

The `re` module provides regular expression operations. Regular expressions are powerful tools for pattern matching within strings.

  * **Purpose:** Searching, matching, and manipulating strings based on patterns.

  * **Key Function:**

      * `re.search(pattern, string)`: Scans through `string` looking for the first location where the `pattern` produces a match. Returns a match object if successful, `None` otherwise.
      * `match_object.group()`: Returns the string matched by the regex.

    **Example:**

    ```python
    import re

    pattern = r'\d+' # Matches one or more digits
    text = "There are 123 apples and 456 oranges."

    match = re.search(pattern, text)
    if match:
        print(match.group()) # Output: 123 (the first match of one or more digits)
    ```